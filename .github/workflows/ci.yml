# This is a CI (continuous integration) workflow for Minecraft datapacks.
# The purpose of CI is to try to catch bugs before they make it into a release.
# If you are using Visual Studio Code, I suggest using SpyglassMC's language tools to do a similar thing. https://github.com/SpyglassMC/Spyglass
# You can check out the indvidual actions on their respective GitHub pages.
# For those who have used GitHub Actions before, notice how there is an extra complile and upload step.
# This is due to how the build-main job checks for errors. Instead of using a script,
# such as, /gradlew build, with this being a datapack, it checks the source files instead. (see Check commands and Check JSON.)
# This is completely intentional, please do not create a PR changing it!

name: CI

on:
  push:
    branches:
      - master 
    paths:
      - 'data/cobblemon/spawn_pool_world/**' 
  workflow_dispatch: 

jobs:
  build-main:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Check commands
        uses: mcbeet/check-commands@v1
        with:
          source: .
          minecraft: "1.20"
      - name: Check JSON
        uses: ocular-d/json-linter@0.0.2
      - name: Compile and upload
        uses: actions/upload-artifact@v4
        with:
          name: MythsandLegends-Datapack
          path: |
            data/
            pack.mcmeta
            pack.png
          if-no-files-found: error
  
  build-packsquash:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run PackSquash
        uses: ComunidadAylas/PackSquash-action@v4
        with:
          artifact_name: '[UNZIP ME] MythsandLegends-Datapack'
          packsquash_version: latest
          options: |
            pack_directory = '.'
            allow_mods = ['OptiFine']

  upload-modrinth:
    needs: build-main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: MythsandLegends-Datapack
      - name: Check if version.txt exists
        id: check_version_file
        run: |
          if [[ -f "version.txt" ]]; then
            echo "file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "file_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Initialize or Increment Version
        run: |
          if [[ "${{ steps.check_version_file.outputs.file_exists }}" == "false" ]]; then
            echo "1.0" > version.txt
          else
            VERSION=$(cat version.txt)
            NEW_VERSION=$(echo "$VERSION" | awk -F. '{print $1 "." ($2+1)}')
            echo "$NEW_VERSION" > version.txt
          fi
          echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV
      - name: Get commit history for changelog
        id: changelog
        run: |
          echo "CHANGELOG=$(git log --pretty=format:'- %h %s (%an)' -n 10)" >> $GITHUB_OUTPUT
      - name: Create Zip file
        run: |
          zip -r MythsandLegends-Datapack.zip MythsandLegends-Datapack
      - name: Upload to Modrinth
        uses: modrinth/minotaur@v2.8.7
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
        with:
          project_slug: myths-and-legends-datapack
          version_number: ${{ env.VERSION }}
          version_type: release
          changelog: ${{ steps.changelog.outputs.CHANGELOG }}
          game_versions: "1.20.1"
          dependencies: |
            required:
              - "MdwFAVRL"
              - "CaOWby9K"
          loaders: |
            - "fabric"
            - "forge"
          file_name: MythsandLegends-Datapack.zip
          upload_file: MythsandLegends-Datapack.zip
      - name: Commit updated version.txt
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Automated version bump to ${{ env.VERSION }}"
          file_pattern: version.txt
