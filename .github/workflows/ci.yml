# This is a CI (continuous integration) workflow for Minecraft datapacks.
# The purpose of CI is to try to catch bugs before they make it into a release.
# If you are using Visual Studio Code, I suggest using SpyglassMC's language tools to do a similar thing. https://github.com/SpyglassMC/Spyglass
# You can check out the indvidual actions on their respective GitHub pages.
# For those who have used GitHub Actions before, notice how there is an extra complile and upload step.
# This is due to how the build-main job checks for errors. Instead of using a script,
# such as, /gradlew build, with this being a datapack, it checks the source files instead. (see Check commands and Check JSON.)
# This is completely intentional, please do not create a PR changing it!

name: CI

on:
  push:
    branches:
      - master
    paths:
      - 'data/cobblemon/spawn_pool_world/**'
  workflow_dispatch:

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history for changelog

      - name: Check commands
        uses: mcbeet/check-commands@v1
        with:
          source: .
          minecraft: "1.20"

      - name: Check JSON
        uses: ocular-d/json-linter@0.0.2

      - name: Generate/Update Version
        id: versioning
        run: |
          if [[ ! -f version.txt ]]; then
            echo "1.1" > version.txt
            NEW_VERSION="1.1"
          else
            CURRENT_VERSION=$(cat version.txt)
            NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{print $1 "." ($2 + 1)}')
            echo "$NEW_VERSION" > version.txt
          fi
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Commit Version Change
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add version.txt
          git commit -m "Update version to ${{ steps.versioning.outputs.version }}" || true  # Allow empty commit if no changes

      - name: Generate Changelog
        id: changelog
        run: |
          echo "changelog=$(git log --pretty=format:'- %h %s (%an)' --reverse HEAD^..HEAD)" >> $GITHUB_OUTPUT

      - name: Compile and upload
        uses: actions/upload-artifact@v2
        with:
          name: MythsandLegends-Datapack
          path: |
            data/
            pack.mcmeta
            pack.png
            version.txt  # Include version file
          if-no-files-found: error

  publish-modrinth:
    needs: build-and-upload  # Wait for artifact
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: MythsandLegends-Datapack

      - name: Upload to Modrinth
        uses: cloudnode-pro/modrinth-publish@1.0.0
        with:
          token: ${{ secrets.MODRINTH_TOKEN }}
          project: CaOWby9K  # myths-and-legends-datapack
          file: MythsandLegends-Datapack.zip  
          changelog: ${{ needs.build-and-upload.outputs.changelog }}
          version: ${{ needs.build-and-upload.outputs.version }}
          game_versions: 1.20.1
          loaders: fabric, forge
          dependencies: MdwFAVRL, CaOWby9K
          api-domain: api.modrinth.com  

  publish-curseforge:
    needs: build-and-upload  # Wait for artifact
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: MythsandLegends-Datapack

      - name: Upload to CurseForge
        uses: itsmeow/curseforge-upload@v3 
        with:
          file_path: MythsandLegends-Datapack.zip
          game_endpoint: minecraft
          relations: requiredDependency:1037337,requiredDependency:687131
          game_versions: 1.20.1
          project_id: 1052805  # mythsandlegends-datapack
          token: ${{ secrets.CF_API_TOKEN }}
