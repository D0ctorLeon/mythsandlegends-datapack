# This is a CI (continuous integration) workflow for Minecraft datapacks.
# The purpose of CI is to try to catch bugs before they make it into a release.
# If you are using Visual Studio Code, I suggest using SpyglassMC's language tools to do a similar thing. https://github.com/SpyglassMC/Spyglass
# You can check out the indvidual actions on their respective GitHub pages.
# For those who have used GitHub Actions before, notice how there is an extra complile and upload step.
# This is due to how the build-main job checks for errors. Instead of using a script,
# such as, /gradlew build, with this being a datapack, it checks the source files instead. (see Check commands and Check JSON.)
# This is completely intentional, please do not create a PR changing it!

name: CI

on:
  push:
    branches:
      - master
    paths:
      - 'data/cobblemon/spawn_pool_world/**'
  workflow_dispatch:

jobs:
  build-main:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.repository != github.event.pull_request.head.repo.full_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Check commands
        uses: mcbeet/check-commands@v1
        with:
          source: .
          minecraft: "1.20"
      - name: Check JSON
        uses: ocular-d/json-linter@0.0.2

      # Read version from version.txt
      - name: Get version
        id: get_version
        run: |
          echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT 

      # Uploads an artifact with the version in the name
      - name: Compile and upload
        uses: actions/upload-artifact@v4
        with:
          name: MythsandLegends-Datapack-v${{ steps.get_version.outputs.version }}
          path: |
            data/
            pack.mcmeta
            pack.png
          if-no-files-found: error

            # Set the version as an output for the job
      - name: Set version output
        id: set_version_output
        run: echo "version=${{ steps.get_version.outputs.version }}" >> $GITHUB_OUTPUT

  build-packsquash:
    runs-on: ubuntu-latest
    needs: build-main  # Make sure build-main completes first
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Download the artifact from build-main
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: MythsandLegends-Datapack-v${{ needs.build-main.outputs.version }}

      - name: Run PackSquash
        uses: ComunidadAylas/PackSquash-action@v4
        with:
          artifact_name: '[UNZIP ME] MythsandLegends-Datapack-v${{ needs.build-main.outputs.version }}'
          packsquash_version: latest
          options: |
            pack_directory = '.'
            allow_mods = ['OptiFine'] 
